/* tslint:disable */
/* eslint-disable */
/**
 * Some API This is a sample server celler server.
 *
 * The version of the OpenAPI document: 1.0 Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
	ControllersBooksDeleteResponse,
	ControllersBooksGetResponse,
	ControllersBooksListResponse,
	ControllersBooksPostRequest,
	HttputilHTTPError,
} from "../models";
import {
	ControllersBooksDeleteResponseFromJSON,
	ControllersBooksDeleteResponseToJSON,
	ControllersBooksGetResponseFromJSON,
	ControllersBooksGetResponseToJSON,
	ControllersBooksListResponseFromJSON,
	ControllersBooksListResponseToJSON,
	ControllersBooksPostRequestFromJSON,
	ControllersBooksPostRequestToJSON,
	HttputilHTTPErrorFromJSON,
	HttputilHTTPErrorToJSON,
} from "../models";

export interface V1BooksIdDeleteRequest {
	id: string;
}

export interface V1BooksIdGetRequest {
	id: string;
}

export interface V1BooksIdPutRequest {
	id: string;
	book: ControllersBooksPostRequest;
}

export interface V1BooksPostRequest {
	book: ControllersBooksPostRequest;
}

export class BooksApi extends runtime.BaseAPI {
	/** Get books List books */
	async v1BooksGetRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<ControllersBooksListResponse>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/v1/books/`,
				method: "GET",
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksListResponseFromJSON(jsonValue));
	}

	/** Get books List books */
	async v1BooksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllersBooksListResponse> {
		const response = await this.v1BooksGetRaw(initOverrides);
		return await response.value();
	}

	/** Delete book by id Delete book by id */
	async v1BooksIdDeleteRaw(
		requestParameters: V1BooksIdDeleteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<ControllersBooksDeleteResponse>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				"id",
				"Required parameter requestParameters.id was null or undefined when calling v1BooksIdDelete.",
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/v1/books/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
				method: "DELETE",
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksDeleteResponseFromJSON(jsonValue));
	}

	/** Delete book by id Delete book by id */
	async v1BooksIdDelete(
		requestParameters: V1BooksIdDeleteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<ControllersBooksDeleteResponse> {
		const response = await this.v1BooksIdDeleteRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/** Get book by id Get book by id */
	async v1BooksIdGetRaw(
		requestParameters: V1BooksIdGetRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<ControllersBooksGetResponse>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				"id",
				"Required parameter requestParameters.id was null or undefined when calling v1BooksIdGet.",
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/v1/books/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
				method: "GET",
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksGetResponseFromJSON(jsonValue));
	}

	/** Get book by id Get book by id */
	async v1BooksIdGet(
		requestParameters: V1BooksIdGetRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<ControllersBooksGetResponse> {
		const response = await this.v1BooksIdGetRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/** Put book by id Update book by id */
	async v1BooksIdPutRaw(
		requestParameters: V1BooksIdPutRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<ControllersBooksGetResponse>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				"id",
				"Required parameter requestParameters.id was null or undefined when calling v1BooksIdPut.",
			);
		}

		if (requestParameters.book === null || requestParameters.book === undefined) {
			throw new runtime.RequiredError(
				"book",
				"Required parameter requestParameters.book was null or undefined when calling v1BooksIdPut.",
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters["Content-Type"] = "application/json";

		const response = await this.request(
			{
				path: `/v1/books/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
				method: "PUT",
				headers: headerParameters,
				query: queryParameters,
				body: ControllersBooksPostRequestToJSON(requestParameters.book),
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksGetResponseFromJSON(jsonValue));
	}

	/** Put book by id Update book by id */
	async v1BooksIdPut(
		requestParameters: V1BooksIdPutRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<ControllersBooksGetResponse> {
		const response = await this.v1BooksIdPutRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/** Post book Create book */
	async v1BooksPostRaw(
		requestParameters: V1BooksPostRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<ControllersBooksGetResponse>> {
		if (requestParameters.book === null || requestParameters.book === undefined) {
			throw new runtime.RequiredError(
				"book",
				"Required parameter requestParameters.book was null or undefined when calling v1BooksPost.",
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters["Content-Type"] = "application/json";

		const response = await this.request(
			{
				path: `/v1/books/`,
				method: "POST",
				headers: headerParameters,
				query: queryParameters,
				body: ControllersBooksPostRequestToJSON(requestParameters.book),
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksGetResponseFromJSON(jsonValue));
	}

	/** Post book Create book */
	async v1BooksPost(
		requestParameters: V1BooksPostRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<ControllersBooksGetResponse> {
		const response = await this.v1BooksPostRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
