/* tslint:disable */
/* eslint-disable */
/**
 * Some API
 * This is a sample server celler server.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ControllersBooksGetData,
  ControllersBooksListData,
  HttputilHTTPError,
} from '../models';
import {
    ControllersBooksGetDataFromJSON,
    ControllersBooksGetDataToJSON,
    ControllersBooksListDataFromJSON,
    ControllersBooksListDataToJSON,
    HttputilHTTPErrorFromJSON,
    HttputilHTTPErrorToJSON,
} from '../models';

export interface V1BookIdDeleteRequest {
    id: string;
}

export interface V1BookIdGetRequest {
    id: string;
}

export interface V1BookIdPutRequest {
    id: string;
}

/**
 * 
 */
export class BooksApi extends runtime.BaseAPI {

    /**
     * delete book by id
     * Update book by id
     */
    async v1BookIdDeleteRaw(requestParameters: V1BookIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllersBooksGetData>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1BookIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/book/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksGetDataFromJSON(jsonValue));
    }

    /**
     * delete book by id
     * Update book by id
     */
    async v1BookIdDelete(requestParameters: V1BookIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllersBooksGetData> {
        const response = await this.v1BookIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get book by id
     * Get book by id
     */
    async v1BookIdGetRaw(requestParameters: V1BookIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllersBooksGetData>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1BookIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/book/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksGetDataFromJSON(jsonValue));
    }

    /**
     * get book by id
     * Get book by id
     */
    async v1BookIdGet(requestParameters: V1BookIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllersBooksGetData> {
        const response = await this.v1BookIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * put book by id
     * Update book by id
     */
    async v1BookIdPutRaw(requestParameters: V1BookIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllersBooksGetData>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling v1BookIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/book/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksGetDataFromJSON(jsonValue));
    }

    /**
     * put book by id
     * Update book by id
     */
    async v1BookIdPut(requestParameters: V1BookIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllersBooksGetData> {
        const response = await this.v1BookIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * post book
     * Create book
     */
    async v1BookPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllersBooksGetData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/book`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksGetDataFromJSON(jsonValue));
    }

    /**
     * post book
     * Create book
     */
    async v1BookPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllersBooksGetData> {
        const response = await this.v1BookPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * get books
     * List books
     */
    async v1BooksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ControllersBooksListData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersBooksListDataFromJSON(jsonValue));
    }

    /**
     * get books
     * List books
     */
    async v1BooksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ControllersBooksListData> {
        const response = await this.v1BooksGetRaw(initOverrides);
        return await response.value();
    }

}
