/* tslint:disable */
/* eslint-disable */
/**
 * Some API This is a sample server celler server.
 *
 * The version of the OpenAPI document: 1.0 Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	createdAt: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	createdBy: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	deletedAt?: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	deletedBy?: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	email: string;
	/**
	 * @memberof ModelsUser
	 * @type {boolean}
	 */
	emailVerified: boolean;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	firstName: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	id: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	lastName: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	password?: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	updatedAt: string;
	/**
	 * @memberof ModelsUser
	 * @type {string}
	 */
	updatedBy: string;
}

/** Check if a given object implements the ModelsUser interface. */
export function instanceOfModelsUser(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "createdAt" in value;
	isInstance = isInstance && "createdBy" in value;
	isInstance = isInstance && "email" in value;
	isInstance = isInstance && "emailVerified" in value;
	isInstance = isInstance && "firstName" in value;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "lastName" in value;
	isInstance = isInstance && "updatedAt" in value;
	isInstance = isInstance && "updatedBy" in value;

	return isInstance;
}

export function ModelsUserFromJSON(json: any): ModelsUser {
	return ModelsUserFromJSONTyped(json, false);
}

export function ModelsUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsUser {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		createdAt: json["createdAt"],
		createdBy: json["createdBy"],
		deletedAt: !exists(json, "deletedAt") ? undefined : json["deletedAt"],
		deletedBy: !exists(json, "deletedBy") ? undefined : json["deletedBy"],
		email: json["email"],
		emailVerified: json["emailVerified"],
		firstName: json["firstName"],
		id: json["id"],
		lastName: json["lastName"],
		password: !exists(json, "password") ? undefined : json["password"],
		updatedAt: json["updatedAt"],
		updatedBy: json["updatedBy"],
	};
}

export function ModelsUserToJSON(value?: ModelsUser | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		createdAt: value.createdAt,
		createdBy: value.createdBy,
		deletedAt: value.deletedAt,
		deletedBy: value.deletedBy,
		email: value.email,
		emailVerified: value.emailVerified,
		firstName: value.firstName,
		id: value.id,
		lastName: value.lastName,
		password: value.password,
		updatedAt: value.updatedAt,
		updatedBy: value.updatedBy,
	};
}
