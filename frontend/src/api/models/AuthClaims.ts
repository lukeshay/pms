/* tslint:disable */
/* eslint-disable */
/**
 * Some API This is a sample server celler server.
 *
 * The version of the OpenAPI document: 1.0 Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { AuthClaimsExp } from "./AuthClaimsExp";
import { AuthClaimsExpFromJSON, AuthClaimsExpFromJSONTyped, AuthClaimsExpToJSON } from "./AuthClaimsExp";
import type { AuthClaimsIat } from "./AuthClaimsIat";
import { AuthClaimsIatFromJSON, AuthClaimsIatFromJSONTyped, AuthClaimsIatToJSON } from "./AuthClaimsIat";
import type { AuthClaimsNbf } from "./AuthClaimsNbf";
import { AuthClaimsNbfFromJSON, AuthClaimsNbfFromJSONTyped, AuthClaimsNbfToJSON } from "./AuthClaimsNbf";

/**
 * @export
 * @interface AuthClaims
 */
export interface AuthClaims {
	/**
	 * The `aud` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3
	 *
	 * @memberof AuthClaims
	 * @type {string[]}
	 */
	aud?: Array<string>;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	createdAt: string;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	createdBy: string;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	deletedAt?: string;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	deletedBy?: string;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	email: string;
	/**
	 * @memberof AuthClaims
	 * @type {boolean}
	 */
	emailVerified: boolean;
	/**
	 * @memberof AuthClaims
	 * @type {AuthClaimsExp}
	 */
	exp?: AuthClaimsExp;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	firstName: string;
	/**
	 * @memberof AuthClaims
	 * @type {AuthClaimsIat}
	 */
	iat?: AuthClaimsIat;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	id: string;
	/**
	 * The `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1
	 *
	 * @memberof AuthClaims
	 * @type {string}
	 */
	iss?: string;
	/**
	 * The `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7
	 *
	 * @memberof AuthClaims
	 * @type {string}
	 */
	jti?: string;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	lastName: string;
	/**
	 * @memberof AuthClaims
	 * @type {AuthClaimsNbf}
	 */
	nbf?: AuthClaimsNbf;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	password?: string;
	/**
	 * The `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2
	 *
	 * @memberof AuthClaims
	 * @type {string}
	 */
	sub?: string;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	updatedAt: string;
	/**
	 * @memberof AuthClaims
	 * @type {string}
	 */
	updatedBy: string;
}

/** Check if a given object implements the AuthClaims interface. */
export function instanceOfAuthClaims(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && "createdAt" in value;
	isInstance = isInstance && "createdBy" in value;
	isInstance = isInstance && "email" in value;
	isInstance = isInstance && "emailVerified" in value;
	isInstance = isInstance && "firstName" in value;
	isInstance = isInstance && "id" in value;
	isInstance = isInstance && "lastName" in value;
	isInstance = isInstance && "updatedAt" in value;
	isInstance = isInstance && "updatedBy" in value;

	return isInstance;
}

export function AuthClaimsFromJSON(json: any): AuthClaims {
	return AuthClaimsFromJSONTyped(json, false);
}

export function AuthClaimsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthClaims {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		aud: !exists(json, "aud") ? undefined : json["aud"],
		createdAt: json["createdAt"],
		createdBy: json["createdBy"],
		deletedAt: !exists(json, "deletedAt") ? undefined : json["deletedAt"],
		deletedBy: !exists(json, "deletedBy") ? undefined : json["deletedBy"],
		email: json["email"],
		emailVerified: json["emailVerified"],
		exp: !exists(json, "exp") ? undefined : AuthClaimsExpFromJSON(json["exp"]),
		firstName: json["firstName"],
		iat: !exists(json, "iat") ? undefined : AuthClaimsIatFromJSON(json["iat"]),
		id: json["id"],
		iss: !exists(json, "iss") ? undefined : json["iss"],
		jti: !exists(json, "jti") ? undefined : json["jti"],
		lastName: json["lastName"],
		nbf: !exists(json, "nbf") ? undefined : AuthClaimsNbfFromJSON(json["nbf"]),
		password: !exists(json, "password") ? undefined : json["password"],
		sub: !exists(json, "sub") ? undefined : json["sub"],
		updatedAt: json["updatedAt"],
		updatedBy: json["updatedBy"],
	};
}

export function AuthClaimsToJSON(value?: AuthClaims | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		aud: value.aud,
		createdAt: value.createdAt,
		createdBy: value.createdBy,
		deletedAt: value.deletedAt,
		deletedBy: value.deletedBy,
		email: value.email,
		emailVerified: value.emailVerified,
		exp: AuthClaimsExpToJSON(value.exp),
		firstName: value.firstName,
		iat: AuthClaimsIatToJSON(value.iat),
		id: value.id,
		iss: value.iss,
		jti: value.jti,
		lastName: value.lastName,
		nbf: AuthClaimsNbfToJSON(value.nbf),
		password: value.password,
		sub: value.sub,
		updatedAt: value.updatedAt,
		updatedBy: value.updatedBy,
	};
}
